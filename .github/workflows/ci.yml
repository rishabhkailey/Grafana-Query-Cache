name: CI

on:
  push:
    branches:
      - feature/ci-cd
    paths-ignore:
      - CHANGELOG.md

jobs:
  nginx-config-test-default-options:
    runs-on: "ubuntu-latest"
    container: 
      image: "openresty/openresty:1.21.4.3-bullseye-fat"
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: set runtime env variables
        run: echo "NGINX_CONFIG_TEMPLATE_DIRECTORY=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
      - run: |
          echo $NGINX_CONFIG_TEMPLATE_DIRECTORY && ls $NGINX_CONFIG_TEMPLATE_DIRECTORY && \
          chmod +x ./entrypoint.sh && \
          ./entrypoint.sh test

  nginx-config-test-ssl-on:
    runs-on: "ubuntu-latest"
    container: 
      image: "openresty/openresty:1.21.4.3-bullseye-fat"
    timeout-minutes: 5
    env:
      GRAFANA_HOST: "localhost:3000"
      GRAFANA_SCHEME: "http"
      MAX_CACHE_SIZE: "1g"
      KEY_ZONE_SIZE: "10m"
      MAX_INACTIVE_TIME: "10m"
      CACHE_EXPIRE_TIME: "60m"
      CACHE_DIRECTORY: "/var/lib/nginx/cache"
      CACHE_VERSION: "1"
      SERVER_NAME: "_"
      LISTEN: "80"
      SSL: "off"
      SSL_CERTIFICATE: ""
      SSL_CERTIFICATE_KEY: ""
      SSL_PROTOCOLS: ""
      SSL_CIPHERS: ""
      SSL_PASSWORD_FILE: ""
      CLIENT_MAX_BODY_SIZE: "5m"
      NGINX_CONFIG_OUTPUT_FILE: "/etc/nginx/conf.d/grafana.conf"
    steps:
      - uses: actions/checkout@v4
      - name: set runtime env variables
        run: echo "NGINX_CONFIG_TEMPLATE_DIRECTORY=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
      - run: |
          echo $NGINX_CONFIG_TEMPLATE_DIRECTORY && ls $NGINX_CONFIG_TEMPLATE_DIRECTORY && \
          chmod +x ./entrypoint.sh && \
          ./entrypoint.sh test
    
  nginx-config-test-ssl-off:
    runs-on: "ubuntu-latest"
    container: 
      image: "openresty/openresty:1.21.4.3-bullseye-fat"
    timeout-minutes: 5
    env: 
      GRAFANA_HOST: "localhost:3000"
      GRAFANA_SCHEME: "http"
      MAX_CACHE_SIZE: "1g"
      KEY_ZONE_SIZE: "10m"
      MAX_INACTIVE_TIME: "10m"
      CACHE_EXPIRE_TIME: "60m"
      CACHE_DIRECTORY: "/var/lib/nginx/cache"
      CACHE_VERSION: "1"
      SERVER_NAME: "_"
      LISTEN: "80"
      SSL: "on"
      SSL_CERTIFICATE: "/cert.crt"
      SSL_CERTIFICATE_KEY: "/cert.key"
      SSL_PROTOCOLS: "TLSv1 TLSv1.1 TLSv1.2 TLSv1.3"
      SSL_CIPHERS: "HIGH:!aNULL:!MD5"
      SSL_PASSWORD_FILE: "/cert-password"
      CLIENT_MAX_BODY_SIZE: "5m"
      NGINX_CONFIG_OUTPUT_FILE: "/etc/nginx/conf.d/grafana.conf"
    steps:
      - uses: actions/checkout@v4
      - name: set runtime env variables
        run: echo "NGINX_CONFIG_TEMPLATE_DIRECTORY=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
      - name: create empty test files
        run: touch $SSL_CERTIFICATE $SSL_CERTIFICATE_KEY $SSL_PASSWORD_FILE
      - run: |
          echo $NGINX_CONFIG_TEMPLATE_DIRECTORY && ls $NGINX_CONFIG_TEMPLATE_DIRECTORY && ls $NGINX_CONFIG_TEMPLATE_DIRECTORY && \
          chmod +x ./entrypoint.sh && \
          ./entrypoint.sh test

  unit-test:      
    runs-on: "ubuntu-latest"
    timeout-minutes: 10
    container: 
      image: "openresty/openresty:1.21.4.3-bullseye-fat"
    env:
      LUA_CPATH: ";;/usr/local/openresty/lualib/?.so;/usr/local/openresty/site/lualib/?.so;/usr/local/lib/lua/5.1/?.so;"
      LUA_PATH: ";;/usr/local/openresty/lualib/?.lua;/usr/local/openresty/site/lualib/?.lua;/usr/local/lib/lua/5.1?.lua;/usr/local/share/lua/5.1/?.lua;"
    steps:
      - name: install required packages
        run: 
          |
            apt update && apt install -y luarocks && \
            luarocks install luaunit && luarocks install md5
      - name: add github workspace in the LUA_PATH variable
        run: echo "LUA_PATH=$LUA_PATH;$GITHUB_WORKSPACE/?.lua" >> "$GITHUB_ENV"
      - uses: actions/checkout@v4
      - name: run tests
        run: luajit unit_test.lua

  integration-test:
    runs-on: "ubuntu-latest"
    timeout-minutes: 10
    env: 
      DOCKER_COMPOSE_VERSION: v2.23.3
    steps:
      - name: docker compose cli
        run: |
          wget https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m) -O /opt/docker-compose && \
          chmod +x /opt/docker-compose
      - uses: actions/checkout@v4
      - name: start containers
        run: /opt/docker-compose -f test/docker-compose.yml up -d --build
      - name: clear test cache
        run: docker exec test-integration-test-1 go clean -testcache
      - name: run test
        run: docker exec test-integration-test-1 go test -v ./

  container-image-scan:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: rishabhveer/grafana-query-cache
      REGISTRY: docker.io
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build an image from Dockerfile
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@f3d98514b056d8c71a3552e8328c225bc7f6f353
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          format: "table"
          ignore-unfixed: true
          vuln-type: "os,library"
          exit-code: "1"